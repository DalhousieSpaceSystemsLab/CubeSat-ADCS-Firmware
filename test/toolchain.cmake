cmake_minimum_required(VERSION 3.16)

macro(msp430_check_define_macro var)
    if(NOT ${var})
        message(FATAL_ERROR "${${var}} NOT DEFINED. Please define it before invoking ${CMAKE_CURRENT_FUNCTION}")
    endif(NOT ${var})
endmacro(msp430_check_define_macro var)

macro(msp430_check_defines_macro)
    msp430_check_define_macro(MSP430_MCU)
    msp430_check_define_macro(MSP430_MCU_FREQ)
endmacro(msp430_check_defines_macro)

list(APPEND required_packages "Git")

if(MINGW OR CYGWIN OR WIN32)
    set(UTIL_SEARCH_CMD where)
elseif(UNIX AND NOT APPLE)
    set(UTIL_SEARCH_CMD which)
elseif(APPLE)
    message(FATAL_ERROR "Apple is not supported yet")
else()
    message(FATAL_ERROR "PLATFORM : ${CMAKE_HOST_SYSTEM_NAME} is not supported")
endif()

foreach(pkg ${required_packages})
    find_package(${pkg})
    string(TOUPPER ${pkg} pkg_uppercase)
    if(${pkg_uppercase}_FOUND)
        #message("Looking for package ${pkg}... FOUND : ${${pkg_uppercase}_EXECUTABLE}")    
    else()
        message(FATAL_ERROR "Looking for package ${pkg}... NOT_FOUND")
    endif(${pkg_uppercase}_FOUND)
endforeach(pkg ${required_packages})

if(CMAKE_CROSSCOMPILING STREQUAL "ON")
    set(TOOLCHAIN_PREFIX msp430-elf-)
endif(CMAKE_CROSSCOMPILING STREQUAL "ON")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

if(CMAKE_CROSSCOMPILING STREQUAL "ON")
    set(CMAKE_EXECUTABLE_SUFFIX ".elf")
else()
    if(MINGW OR CYGWIN OR WIN32)
        set(CMAKE_EXECUTABLE_SUFFIX ".exe")
    elseif(UNIX)
        set(CMAKE_EXECUTABLE_SUFFIX ".out")
    else()
        message("UNSUPPORTED PLATFORM : ${CMAKE_HOST_SYSTEM_NAME}")
    endif()
endif()

set(CMAKE_C_COMPILER_NAME ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_ASM_COMPILER_NAME ${TOOLCHAIN_PREFIX}gcc)
set(CMAKE_CXX_COMPILER_NAME ${TOOLCHAIN_PREFIX}g++)
set(CMAKE_OBJCOPY_NAME ${TOOLCHAIN_PREFIX}objcopy)
set(CMAKE_OBJDUMP_NAME ${TOOLCHAIN_PREFIX}objdump)
set(CMAKE_SIZE_NAME ${TOOLCHAIN_PREFIX}size)
set(CMAKE_GDB_NAME ${TOOLCHAIN_PREFIX}gdb) 

find_program(CMAKE_C_COMPILER ${CMAKE_C_COMPILER_NAME} HINTS ${BIN_HINTS} REQUIRED)
find_program(CMAKE_ASM_COMPILER ${CMAKE_ASM_COMPILER_NAME} HINTS ${BIN_HINTS} REQUIRED)
find_program(CMAKE_CXX_COMPILER ${CMAKE_CXX_COMPILER_NAME} HINTS ${BIN_HINTS} REQUIRED)
find_program(CMAKE_OBJCOPY ${CMAKE_OBJCOPY_NAME} HINTS ${BIN_HINTS} REQUIRED)
find_program(CMAKE_OBJDUMP ${CMAKE_OBJDUMP_NAME} HINTS ${BIN_HINTS} REQUIRED)
find_program(CMAKE_SIZE ${CMAKE_SIZE_NAME} HINTS ${BIN_HINTS} REQUIRED)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_options("-Wall")
    add_compile_options("-Wshadow")
    add_compile_options("-g")
    add_compile_options("-ggdb")
endif()